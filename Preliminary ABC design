library(ggplot2)
# parameters
start_time = proc.time()
populations = list(S = 900, I = 10, R = 0, N = 910)

generation = 100

stoch_param = list(B = 0.4, g = 0.08)

repeats = 1

# SIR model 
Stochastic_sir_model = function(times, state, param) {
  S = state$S
  I = state$I
  R = state$R
  N = state$N
  
  B = param$B
  g = param$g
  
  #data frames
  data = data.frame(
    Day = 1:generation,
    Suseptable = numeric(generation),
    Infected = numeric(generation),
    Recovered = numeric(generation)
  )
  
  param_data = data.frame(
    day = 1:generation,
    Sup_change = numeric(generation),
    Inf_change = numeric(generation),
    Recov_change = numeric(generation)
  )
  
  #For loop
  for(i in 1:generation){
    
    #stochastic parameters (environmental variation)
    F = 0.3
    E = rnorm(n = 1, mean = 0, sd = 1)
    Be = B * (1 + F * E)
    
    
    dS = - Be * S * I / N
    dI = Be * S * I / N - g * I
    dR = g * I
    
    S = max(S + dS, 0)
    I = max(I + dI, 0)
    R = max(R + dR, 0) 
    
    data$Suseptable[i] = S
    data$Infected[i] = I
    data$Recovered[i] = R
    
    
    param_data$Sup_change[i] = dS
    param_data$Inf_change[i] = dI
    param_data$Recov_change[i] = dR
    
  }
  
  
  return(data)
}

Observed_data = read.csv("C:\\Users\\ollie\\Desktop\\Uni - 3rd year\\Research project\\R\\Project code\\comparison data\\Summery_comparison_observed_data_1")



#printing stochastic results 
#print(recovered_observed)
#print(result_stoc$parameter_data)

#range of betas (could be issues with these nto being intergers,
# 1 try as each simulation the number will be updated )
potential_beta = list(trys = 1, min = 0.01, max = 0.6)

#tolerance
tolerance = 1

#simulations
simulations = 1:1000

#ABC algorithm

ABC = function(simulations, beta_range, observed_recovered, tolerance){ 
  answer = list()
  prior_beta = list()
  for (i in simulations){
    #function to produce a new beta each run from values outside the function - may need to put an if function to ensure the same beta isnt being used
    beta = runif(beta_range$trys, min = beta_range$min, max = beta_range$max)
    #print(paste('beta used: ',beta))
   
    #Adding prior to a vector 
    stoch_param$B = beta
    prior_beta = append(prior_beta, beta)
    
    #access the recovered population 
    
    sim = Stochastic_sir_model(generation, populations, stoch_param)
    recovered_data = sim$Recovered
    #print(paste('simulations recovered data: ', recovered_data))
    
    #putting both sets of recovered data in the same data frame  
    comparison_data = data.frame (
      Day = 1:generation,
      Simulation = numeric(generation),
      Observed = numeric(generation)
    )
    comparison_data$Simulation = recovered_data
    comparison_data$Observed = observed_recovered
    
    #print(paste('data frame of the simulation and observed', comparison_data))
   
    #going through the data frame producing the summery stat (abs() used to return absolute number, no negatives)
    summery_statistic = 0 
    pre_statistic = 0
      for (i in generation){
        #root mean squared error or ellucian distance requires squaring then square rooting
        prior_sum = (comparison_data$Simulation[i] - comparison_data$Observed[i])^2
        pre_statistic = pre_statistic + prior_sum
      }
    summery_statistic = sqrt(pre_statistic)
    #print(paste('summery statistic: ', summery_statistic))
    
    #tolerance - number of recovered people 
    #make number easier to deal with 
    summery_statistic[is.na(summery_statistic)] = 0
    
    #print(paste('final stat is: ', summery_statistic))
    #print(paste('beta for this run is: ', beta))
    
    pre_answer = 0
    if (summery_statistic >= 0  && summery_statistic <= tolerance){
      pre_answer = pre_answer + beta
    }  
    answer = append(answer, pre_answer)
  }
  #data frame that holds both prior and post data 
  pp_results = data.frame(
    prior = unlist(prior_beta),
    posteria = unlist(answer)
  )
 
  return(pp_results)
}
#Trouble shooting
#Ts = (ABC(simulations, potential_beta, recovered_observed, tolerance))
#print(Ts$prior)
# Run ABC model until 100 results produced 

ABC_100 = function(number){
  all_post_values = c()
  all_prior_values = c()
  tally = 0 
 
  while(tally < number | tally == number){
    final = ABC(simulations, potential_beta, Observed_data$Recovered, tolerance) 
    final_post = final$posteria
    final_prior = final$prior
    
    #Print only values bigger than 0
    only_values = c()
    for (i in final_post){
      if (i > 0){
        only_values = append(only_values, i)
      }
    }
    # Creates a data table showing important information from ABC results 
    results_table = data.frame(
      Tolerance = tolerance,
      Minimum = min(only_values),
      Maximum = max(only_values),
      Median = median(only_values), 
      No_of_results = length(only_values)
    ) 
    # adding values from this run to the empty value 
    all_post_values = append(all_post_values, only_values)
    all_prior_values = append(all_prior_values, final_prior)
    
    #Counts the number of values and adds to tally 
    no_values = results_table$No_of_results
    print(paste('Individual run: ', no_values))
    tally = tally + no_values 
  }
  
  #Remove so only 100
  remove_no = length(all_post_values) - 100
  all_post = all_post_values[-(1:remove_no)]
  
  #table of results 
  all_results = list(
    all_prior = all_prior_values,
    all_post = all_post,
    total_posterior = all_post_values
  )
  
 
  
  return(all_results)
}

results = ABC_100(number_of_runs)

print(single)



#lengths
L_of_post =  length(results$total_posterior)



L_of_prior = length(results$all_prior)

#ci for post
CI_lower_post = quantile(results$all_post, c(0.025))
CI_upper_post = quantile(results$all_post, c(0.975))




# ci prior data 

CI_lower_prior = quantile(results$all_prior, c(0.025))
CI_upper_prior = quantile(results$all_prior, c(0.975))





#descriptive statistic calculations
#RMSE
RMSE_calc = function(data_set, true_value){
  pre_answer = 0
  for (i in data_set){
    answer = (i - true_value)^2
    pre_answer = pre_answer + answer
  }
  RMSE = sqrt(pre_answer/100)
  
  return(RMSE)
}

RMSE_mean_post = RMSE_calc(results$all_post, stoch_param$B)
RMSE_mean_prior = RMSE_calc(results$all_prior, stoch_param$B)

#RMSE (median)
RMSE_calc = function(data_set, true_value){
  pre_answer = 0
  for (i in data_set){
    answer = (i - true_value)^2
    pre_answer = pre_answer + answer
  }
  RMSE = sqrt(pre_answer/100)
  
  return(RMSE)
}

RMSE_median_post = RMSE_calc(results$all_post, stoch_param$B)
RMSE_median_prior = RMSE_calc(results$all_prior, stoch_param$B)

#MAE
MAE_calc = function(data_set, true_value){
  pre_answer = 0
  for (i in data_set){
    answer = abs(i - true_value)
    pre_answer = pre_answer + answer
  }
  MAE = pre_answer/100
  
  return(MAE)
}

MAE_post = MAE_calc(results$all_post, stoch_param$B)
MAE_prior = MAE_calc(results$all_prior, stoch_param$B)

# Bias
bias_calc = function(data_set, true_value){
  mean = mean(data_set)
  bias = mean - true_value
  
  return(bias)
}

bias_post = bias_calc(results$all_post, stoch_param$B)
bias_prior = bias_calc(results$all_prior, stoch_param$B)



#Acceptance rate
acceptance = L_of_post/L_of_prior


#single table
descriptive_table_single = data.frame(
  true_credibitlity_lower_Mean_post = CI_lower_post,
  true_credibitlity_upper_Mean_post = CI_upper_post,
  true_credibitlity_lower_Mean_prior = CI_lower_prior,
  true_credibitlity_upper_Mean_prior = CI_upper_prior,
  Bias_post = bias_post,
  MAE_post = MAE_post,
  RMSE_mean_post = RMSE_mean_post,
  median_post = median(results$all_post),
  Median_prior = median(results$all_prior),
  Bias_pri = bias_prior,
  MAE_pri = MAE_prior,
  RMSE__mean_pri = RMSE_mean_prior,
  RMSE_median_post = RMSE_median_post,
  Acceptance_rate = acceptance
)



print(descriptive_table)
write.csv(descriptive_table_single, 'Post_&_prior4_100_runs_dss')
print(descriptive_table_single)







#running whole function
number_of_runs = 100


multiple_runs = function(repeates){
  tally = 1 
  all_post_data = data.frame()
  all_prior_data = data.frame()
  all_sims_post = data.frame()
  all_sims_prior = data.frame()
  simulation = 1
  L_of_post = 0
  L_of_prior = 0
  all_lower_CI_post = c()
  all_upper_CI_post = c()
  all_lower_CI_prior = c()
  all_upper_CI_prior = c()
  
  while (tally < repeates | tally == repeates){
    results_x = ABC_100(number_of_runs)
    print('in multiple runs')
    #saving the whole sets of data and saving their lengths
    hold_total_post = data.frame(
      Simulation = simulation,
      Values = results$all_post
    )
    
    all_post_data = rbind(all_post_data, hold_total_post)
    L_of_post = L_of_post + length(results$total_posterior)
    
    hold_total_prior = data.frame(
      Simulation = simulation,
      Values = results$all_prior
    )
    
    all_prior_data = rbind(all_prior_data, hold_total_prior)
    L_of_prior = L_of_prior + length(results$all_prior)
    
    #save means and medians (post_data)
    hold_results_table_post = data.frame(
      Simulation = simulation,
      Mean = mean(results$all_post),
      Median = median(results$all_post),
      CI_lower = quantile(results$all_post, c(0.025)),
      CI_upper = quantile(results$all_post, c(0.975))
    )
    
    all_sims_post = rbind(all_sims_post, hold_results_table_post)
    
    all_upper_CI_post = c(all_upper_CI_post, hold_results_table_post$CI_upper)
    all_lower_CI_post = c(all_lower_CI_post, hold_results_table_post$CI_lower)
    
    # DS for prior data 
    hold_results_table_prior = data.frame(
      Simulation = simulation,
      Mean = mean(results$all_prior),
      Median = median(results$all_prior),
      CI_lower = quantile(results$all_prior, c(0.025)),
      CI_upper = quantile(results$all_prior, c(0.975))
    )
    
    all_sims_prior = rbind(all_sims_prior, hold_results_table_prior)
    
    all_upper_CI_prior = c(all_upper_CI_prior, hold_results_table_prior$CI_upper)
    all_lower_CI_prior = c(all_lower_CI_prior, hold_results_table_prior$CI_lower)
    
    
    tally = tally + 1
    simulation = simulation + 1
    print(tally)
  }
  
  #descriptive statistic calculations
  #RMSE
  RMSE_calc = function(data_set, true_value){
    pre_answer = 0
    for (i in data_set){
      answer = (i - true_value)^2
      pre_answer = pre_answer + answer
    }
    RMSE = sqrt(pre_answer/100)
    
    return(RMSE)
  }
  
  RMSE_mean_post = RMSE_calc(all_sims_post$Mean, stoch_param$B)
  RMSE_mean_prior = RMSE_calc(all_sims_prior$Mean, stoch_param$B)
  
  #RMSE (median)
  RMSE_calc = function(data_set, true_value){
    pre_answer = 0
    for (i in data_set){
      answer = (i - true_value)^2
      pre_answer = pre_answer + answer
    }
    RMSE = sqrt(pre_answer/100)
    
    return(RMSE)
  }
  
  RMSE_median_post = RMSE_calc(all_sims_post$Median, stoch_param$B)
  RMSE_median_prior = RMSE_calc(all_sims_prior$Median, stoch_param$B)
  
  #MAE
  MAE_calc = function(data_set, true_value){
    pre_answer = 0
    for (i in data_set){
      answer = abs(i - true_value)
      pre_answer = pre_answer + answer
    }
    MAE = pre_answer/100
    
    return(MAE)
  }
  
  MAE_post = MAE_calc(all_sims_post$Median, stoch_param$B)
  MAE_prior = MAE_calc(all_sims_prior$Median, stoch_param$B)
  
  # Bias
  bias_calc = function(data_set, true_value){
    mean = mean(data_set)
    bias = mean - true_value
    
    return(bias)
  }
  
  bias_post = bias_calc(all_sims_post$Mean, stoch_param$B)
  bias_prior = bias_calc(all_sims_prior$Mean, stoch_param$B)
  
  #coverage post 
  
  tally_coverage_post = 0
  for (i in 1:repeats){
    if (stoch_param$B > all_sims_post$CI_lower[i] && stoch_param$B < all_sims_post$CI_upper[i]){
      tally_coverage_post = tally_coverage_post + 1
    }
  }
  
  coverage_post = tally_coverage_post/repeates
  
  tally_coverage_prior = 0
  for (i in 1:repeats){
    if (stoch_param$B > all_sims_prior$CI_lower[i] && stoch_param$B < all_sims_prior$CI_upper[i]){
      tally_coverage_prior = tally_coverage_prior + 1
    }
  }
  
  coverage_prior = tally_coverage_prior/repeates
  
  #CI
  true_CI_upper_post = mean(all_upper_CI_post)
  true_CI_lower_post = mean(all_lower_CI_post)
  print(true_CI_upper_post)
  print(true_CI_upper_post)
  
  true_CI_upper_prior = mean(all_upper_CI_prior)
  true_CI_lower_prior = mean(all_lower_CI_prior)
  print(true_CI_upper_prior)
  print(true_CI_upper_prior)
  
  #Acceptance rate
  acceptance = L_of_post/L_of_prior
  
  
  
  # table of descriptive statistics #, c(0.025, 0.975)), ,
  descriptive_table = data.frame(
    #credibitlity_lower_Mean_post = quantile(all_sims_post$Mean, c(0.025)),
    #credibility_upper_Mean_post = quantile(all_sims_post$Mean, c(0.975)),
    #credibitlity_lower_Mean_prior = quantile(all_sims_prior$Mean, c(0.025)),
    #credibility_upper_Mean_prior = quantile(all_sims_prior$Mean, c(0.975)),
    true_credibitlity_lower_Mean_post = true_CI_lower_post,
    true_credibitlity_upper_Mean_post = true_CI_upper_post,
    true_credibitlity_lower_Mean_prior = true_CI_lower_prior,
    true_credibitlity_upper_Mean_prior = true_CI_upper_prior,
    coverage_post = coverage_post,
    coverage_prior = coverage_prior,
    Bias_post = bias_post,
    MAE_post = MAE_post,
    RMSE_mean_post = RMSE_mean_post,
    median_post = median(all_sims_post$Mean),
    Median_prior = median(all_sims_prior$Mean),
    Bias_pri = bias_prior,
    MAE_pri = MAE_prior,
    RMSE__mean_pri = RMSE_mean_prior,
    RMSE_median_post = RMSE_median_post,
    Acceptance_rate = acceptance
  )
  
  
  write.csv(all_post_data, 'Post_&_prior_post_100_runs_data')
  write.csv(all_prior_data, 'Post_&_prior_prior_100_runs_data')
  print(descriptive_table)
  write.csv(descriptive_table, 'Post_&_prior_100_runs_dss')
  
  #put in list so results can leave function 
  
  end_results = list(all_post_data, all_prior_data)
  return(end_results)
}


index = 100
print('here')

#info = multiple_runs(repeats)
print('here 2')
post_plot_data = as.data.frame(results[[1]])
print('here 3')
 final_plot_post = data.frame()
 for (i in post_plot_data$Simulation){
   if (i == 1){
     index = which(post_plot_data$Simulation == i)
     print(index)
     hold_table = data.frame(
       values = post_plot_data$Values[index]
       
     )
   }
   final_plot_post = rbind(final_plot_post, hold_table)

 }
 
prior_plot_data = as.data.frame(results[[2]])


final_plot_prior = data.frame()
 for (i in prior_plot_data$Simulation){
   if (i == 1){
     index = which(prior_plot_data$Simulation == i)
     hold_table = data.frame(
       values = prior_plot_data$Values[index]
       
     )
   }
   final_plot_prior = rbind(final_plot_prior, hold_table)
   
 }

end_time = proc.time()

sim_time = end_time - start_time
print(sim_time)


print(final_plot_prior) 

write.csv(final_plot_prior, 'Post_&_prior_post4_100_runs_data_single')
write.csv(final_plot_post, 'Post_&_post_prior4_100_runs_data_single')

p = ggplot() +
  geom_histogram(data = final_plot_prior, aes(x = results[[1]]), fill = 'grey', binwidth = 0.01, color = 'black') +
  geom_histogram(data = final_plot_post, aes(x = results[[2]]), binwidth = 0.01, fill = 'black', color = 'white' ) +
  labs(x = 'Beta', y = 'Frequency')+
  geom_vline(xintercept = stoch_param$B, color = 'red', linetype = 'dashed', linewidth = 1 ) +
  
  scale_y_continuous(expand = c(0,0), limits = c(0, 100), breaks = seq(0,100, by = 25)) +
  geom_hline(yintercept = 0, color = 'black') +
  scale_x_continuous(expand = c(0,0)) +
  
  #scale_fill_manual(values = c('Posterior' = 'black', 'Prior' = 'grey'))+
  
  theme(
    axis.title = element_text(face = 'bold', size = '20'),
    axis.text = element_text(size = '14', family = 'arial', color = 'black'),
    legend.text = element_text(size = '15'),
    legend.title = element_text(face = 'bold', size = '14'),
    
    panel.background = element_rect(fill = 'white', color = NA ),
    
    axis.line.y = element_line(color = 'black'),
    axis.line.x = element_line(color = 'black'),
    
    panel.grid.major.x = element_blank(),
    panel.grid.minor.x = element_blank(),
    panel.grid.major.y = element_line(color = 'black'),
    panel.grid.minor.y = element_line(color = 'black'),
    legend.position = "none"
  
    
  ) 
print(p)
